const User = require('../models/User')
const express = require('express')
const app = express()
const handleErr = require('../HandleFunction/HandleErr')
const handleSuccess = require('../HandleFunction/handleSuccess')
const sendNotification = require('../HandleFunction/SendNotification')
const jwt = require("jsonwebtoken");
const fs = require('fs')
const upload = require('../HandleFunction/UploadFile')
const refreshTokens = require('../HandleFunction/JWT').refreshTokens
const refreshTokenKey = require('../constants/jwtpasswords').refreshTokenKey
const accessTokenKey = require('../constants/jwtpasswords').accessTokenKey
const auth = require('../HandleFunction/JWT').auth
const verifyToken = require('../HandleFunction/JWT').verifyToken
const Vehicles = require('../models/Vehicles')
const Referrals = require('../models/Referrals')
const uid = require('uid')
const Mechanic = require('../models/Mechanic')
const allVehicles = require('./Vehicles DAta.json').results
//Create User
app.post('/api/addUser', (req, res) => {            //tested
    const user = req.body
    if (user.firebaseUID) {
        let referralId = uid(8)
        user.referralId = referralId
        User.create(user, (err, doc) => {
            if (err) {
                return res.json(handleErr(err))
            }
            else {
                return res.json(handleSuccess(doc))
            }
        })
    }
    else {
        return res.json(handleErr('User can not be null'))
    }
})

//Add user imahe

app.put('/api/addImage', upload.single('fileData'), (req, res) => {    //tested
    //below code will read the data from the upload folder. Multer will automatically upload the file in that folder with an  autogenerated name
    fs.readFile(req.file.path, (err, contents) => {
        if (err) {
            return res.json(handleErr(err))
        } else {

            User.findOneAndUpdate({ firebaseUID: req.body.firebaseUID }, { profilePic: req.file.filename }, { new: true }, (err, doc) => {
                if (err) return res.json(handleErr(err))
                else {
                    return res.json(handleSuccess(doc))
                }
            })
        }
    });
})

//User Google


app.post('/api/addToken', (req, res) => {       //tested
    if (req.body.firebaseUID) {
        User.findOneAndUpdate({ firebaseUID: req.body.firebaseUID }, { token: req.body.token }, { new: true })
        .populate('referredId').populate('favorites').populate('vehicles.vehicle').exec((err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(doc))
            }
        })
    } else {
        return res.json(handleErr('User can not be null'))
    }
})

//Update User
app.put('/api/updateUser', (req, res) => {      //tested 
    let user = req.body
    if (user.firebaseUID) {
        User.findOneAndUpdate({ firebaseUID: req.body.firebaseUID }, user, { new: true })
        .populate('referredId').populate('favorites').populate('vehicles.vehicle').exec((err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(doc))
            }
        })
    }
    else {
        return res.json(handleErr('User can not be null'))
    }
})
//block user
app.post("/api/blockuser", (req, res) => {
    User.findOneAndUpdate({ firebaseUID: req.body.uid },
        { blocked: true },
        { new: true },
        (err, doc) => {
            if (err) {
                return res.json(handleErr(err))
            }
            else {
                if(doc.token!==undefined && doc.token!==null){
                    let data = {
                        tokens: [doc.token],
                        body: "Your user account has been blocked temporarily",
                        title: "BLOCKED!"
                    }
                    sendNotification(data)
                }
                return res.json(handleSuccess(doc))
            }
        })
})


//Unblock user
app.post("/api/Unblockuser", (req, res) => {
    User.findOneAndUpdate({ firebaseUID: req.body.uid },
        { blocked: false },
        { new: true },
        (err, doc) => {
            if (err) {
                res.json(handleErr(err))
            }
            else {
                if(doc.token!==undefined && doc.token!==null){
                    let data = {
                        tokens: [doc.token],
                        body: "Your user account has been unblocked now.",
                        title: "UNBLOCKED!"
                    }
                    sendNotification(data)
                }
                return res.json(handleSuccess(doc))
            }
        })
})

app.put('/api/login', (req, res) => {
    const user = req.body;
    if (!user) {
        return res.status(404).json(handleErr('Body empty'));
    }
    else{
    if(user.firebaseUID){
        User.findOne({firebaseUID:user.firebaseUID},(err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                if(doc!==null){
                    User.findOneAndUpdate({ firebaseUID: user.firebaseUID }, { isLoggedIn: true }, { new: true })
                    .populate('referredId').populate('favorites').populate('vehicles.vehicle').exec((errr, doc)=>{
                        if (errr) return res.json(handleErr(errr))
                        else {
                            const user = {
                                ...doc
                            }
                            let accessToken = jwt.sign(user, accessTokenKey, { expiresIn: "23h" });
                            let refreshToken = jwt.sign(user, refreshTokenKey, { expiresIn: "364d" });
                            refreshTokens.push(refreshToken);
                            let response = {
                                accessToken,
                                refreshToken,
                                user:doc
                            }
                            return res.json(handleSuccess(response))
                        }
                    })
                }
                else{
                    Mechanic.findOne({firebaseUID:user.firebaseUID},(error,mechanic)=>{
                        if(error)return res.json(handleErr(error))
                        else{
                            if(mechanic!==null){
                                Mechanic.findOneAndUpdate({ firebaseUID: user.firebaseUID }, { isLoggedIn: true }, { new: true })
                                .populate('membership').populate('reviews.order').populate('reviews.user').exec((errr, doc) => {
                                    if (errr) return res.json(handleErr(errr))
                                    else {
                                        const user = {
                                            ...doc
                                        }
                                        let accessToken = jwt.sign(user, accessTokenKey, { expiresIn: "23h" });
                                        let refreshToken = jwt.sign(user, refreshTokenKey, { expiresIn: "364d" });
                                        refreshTokens.push(refreshToken);
                                        let response = {
                                            accessToken,
                                            refreshToken,
                                            user:doc
                                        }
                                        return res.json(handleSuccess(response))
                                    }
                                })          
                            }
                            else{
                                return res.json(handleErr('No record found'))
                            }
                        }
                    })
                }
            }
        })
    }
    else{
        return res.json(handleErr('User can not be null'))
    }
    }
})

app.post("/api/checkToken", (req, res) => {
    let { refreshToken, accessToken } = req.body
    if (refreshToken !== undefined && accessToken !== undefined) {
        const response = verifyToken(accessToken, refreshToken)
        // console.log('response->', response)
        if (response.success === true) {
            return res.json(handleSuccess(response.token))
        } else {
            return res.json(handleErr(response.message))
        }
    }
    else {
        return res.json(handleErr('Unauthorized access'))
    }
});

app.put('/api/logout', (req, res) => {
    const { email } = req.body
    console.log('logggouttttt->',email)
    User.findOneAndUpdate({ email }, { $set: { isLoggedIn: false } }, { new: true }).exec((err, doc) => {
        if (err) return res.json(handleErr(err))
        else {
            return res.json(handleSuccess(doc))
        }
    })
})


app.get('/api/getUserData:firebaseUID', (req, res) => {
    if (req.params.firebaseUID) {
        User.findOne({ firebaseUID: req.params.firebaseUID }).populate('vehicles.vehicle').populate('favorites').populate('referredId').exec((err, doc) => {
            if (err) return res.json(handleErr(err))
            else {
                return res.json(handleSuccess(doc))
            }
        })
    }
})

//Search users
app.post('/api/getUsers:page', (req, res) => {
    var perPage = 20
    var page = req.params.page || 1
    User.find({}).populate('favorites')
    .populate('referredId').populate('vehicles.vehicle').skip((perPage * page) - perPage)
    .limit(perPage).exec((error, data) => {
        if (error) return res.json(handleErr(error))
        else User.estimatedDocumentCount({ }).exec((err, count) => {
            if (err) return res.json(handleErr(err))
           else{
               let response = {
                data,
                current: page,
                pages: Math.ceil(count / perPage)
               }
               return res.json(handleSuccess(response))
           }
        })
    })
})

app.post('/api/userSearch', (req, res) => {
    User.find({ $text: { $search: req.body.name } })
        .limit(20)
        .populate('vehicles.vehicle')
        .exec((err, docs) => {
            if (err)
               return res.json(handleErr(err))
            else { res.json(handleSuccess(docs)) }
        });
})

app.post("/protected", auth, (req, res) => {
    return res.json(handleSuccess(req.user));
})

//Add Vehicle
app.put('/api/addVehicle',(req,res)=>{
    let {id,vehicle} = req.body
    if(id!==undefined){
        User.findByIdAndUpdate(id,{$push:{vehicles:vehicle}},{new:true})
        .populate('vehicles.vehicle').populate('favorites').populate('referredId').exec((err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(doc))
            }
        })
    }else{
        return res.json(handleErr('User can not be null'))
    }
})

//Remove Vehicle
app.delete('/api/removeVehicle',(req,res)=>{
    let {id,vehicleId} = req.body
    if(id!==undefined){
        User.findByIdAndUpdate(id,{$pull:{vehicles:{"_id":vehicleId}}},{new:true})
        .populate('vehicles.vehicle').populate('favorites').populate('referredId').exec((err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(doc))
            }
        })
    }else{
        return res.json(handleErr('User can not be null'))
    }
})

//Add Address
app.put('/api/addAddress',(req,res)=>{
    let {id,address} = req.body
    if(id!==undefined){
        User.findByIdAndUpdate(id,{$push:{addresses:address}},{new:true}).exec((err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(doc))
            }
        })
    }else{
        return res.json(handleErr('User can not be null'))
    }
})


//Get all vehicles
app.post('/api/getAllVehicles',(req,res)=>{
    Vehicles.find({ Model: { $regex:req.body.name+ '.*' } })
        .limit(20)
        .exec((err, docs) => {
            if (err)
               return res.json(handleErr(err))
            else { res.json(handleSuccess(docs)) }
        });
})


//Get makes for vehicles
app.post('/api/vehicleMakes',(req,res)=>{
    Vehicle.distinct('Make',(err,docs)=>{
        if(err)return res.json(handleErr(err))
        else{
            return res.json(handleSuccess(docs))
        }
    })
})
//Get vehicle by Make
app.post('/api/vehiclesByMake',(req,res)=>{
    if(req.body.Make){
        Vehicle.find({
            Make:req.body.Make
        },(err,docs)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(docs))
            }
        })
    }else{
        return res.json(handleErr('Make can not be null'))
    }
})

app.post('/api/searchVehicleData',(req,res)=>{
    Vehicles.find({ completeVehicle: { $regex:req.body.name+ '.*' } })
        .limit(20)
        .exec((err, docs) => {
            if (err)
               return res.json(handleErr(err))
            else { res.json(handleSuccess(docs)) }
        });
})

//Signup user by referral
app.post('/api/signupReferral',(req,res)=>{
    if(req.body.referralId && req.body.firebaseUID){
        let user = Object.assign({},req.body)
        let referralId = uid(8)
        user.referralId = referralId
        User.create(user,(err,doc)=>{ //Create New User
            if(err){
                return res.json(handleErr(err))
            }
            else{
                let {referralId} = req.body
                User.findOne({referralId}).exec((error,referring)=>{        //Find User who referred
                    if(error)return res.json(handleErr(error))
                    else{
                        let data = {
                            referredId:doc._id,
                            referring:referring._id
                        }
                        Referrals.create(data,(er,referral)=>{      //Create referral
                            if(er){
                                return res.json(handleErr(er))
                            }
                            else{
                                User.findByIdAndUpdate(doc._id,{referredId:referral._id},{new:true})
                                .populate('vehicles.vehicle').populate('favorites').populate('referredId').exec((errror,newUser)=>{ //Add referral id in new user
                                    if(errror)return res.json(handleErr(errror))
                                    else{
                                        return res.json(handleSuccess(newUser))
                                    }
                                })
                            }
                        })
                    }
                })
            }
        })

    }else{
        return res.json(handleErr('Referral ID and FirebaseUID is required'))
    }
})


//Get my referrals
app.post('/api/getMyReferrals',(req,res)=>{
    if(req.body.userId){
        let {userId} = req.body
        Referrals.find({referring:userId}).populate('referring').populate('referredId').exec((err,docs)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(docs))
            }
        })
    }else{
        return res.json(handleErr('User can not be null'))
    }
})


//Add Favorite
app.put('/api/addFavorite',(req,res)=>{
    if(req.body.id && req.body.mechanic){
        let {id,mechanic} = req.body
        User.findByIdAndUpdate(id,{$push:{favorites:mechanic}},{new:true}).populate('referredId').populate('favorites').populate('vehicles.vehicle')
        .exec((err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(doc))
            }
        })
    }else{
        return res.json(handleErr('User and mechaniccan not be null'))
    }
})

//Remove favorite
app.put('/api/removeFavorite',(req,res)=>{
    if(req.body.id && req.body.mechanic){
        let {id,mechanic} = req.body
        User.findByIdAndUpdate(id,{$pull:{favorites:mechanic}},{new:true}).populate('referredId').populate('favorites').populate('vehicles.vehicle')
        .exec((err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                return res.json(handleSuccess(doc))
            }
        })
    }else{
        return res.json(handleErr('User and mechaniccan not be null'))
    }
})

//User Google
app.post('/api/userGoogle',(req,res)=>{
    if(req.body.firebaseUID && req.body.fName && req.body.email && req.body.profilePic){
        let {firebaseUID,profilePic,email,fName} = req.body
        User.findOneAndUpdate({
            firebaseUID
        },{
            isLoggedIn:true
        }
        ).populate('referredId').populate('favorites').populate('vehicles.vehicle').exec((err,doc)=>{
            if(err)return res.json(handleErr(err))
            else{
                if(doc!==null){ //User found
                    return res.json(handleSuccess(doc))
                }else{          //No user found, signup now!
                    let user = {
                        firebaseUID,
                        email,
                        fName,
                        profilePic,
                        loginMethod:"Google",
                        isLoggedIn:true
                    }
                    let referralId = uid(8)
                    user.referralId = referralId
                    User.create(user, (error, user) => {
                        if (error) {
                            return res.json(handleErr(error))
                        }
                        else {
                            return res.json(handleSuccess(user))
                        }
                    })
                }
            }
        })
    }else{
        return res.json(handleErr('User can not be null'))
    }
})
//Monthly Users
app.post('/api/monthlyUsers',(req,res)=>{
    User.aggregate([
        {
            $group: {
                _id: {
                    year:{$year:"$createdDate"},
                    month:{$month:"$createdDate"},
                },
                
                count: {
                  $sum:1
                }
              },

        },
        {$sort:{"_id":1}}
      ],(err,result)=>{
          if(err)res.json(handleErr(err))
          else {
            let newData = result.map((data)=>{
                return{
                    label:data._id.month,
                    value:data.count
                }
            })
            return res.json(handleSuccess(newData))
          }
      })
})


//bulk vehicles
app.post('/api/bulkVehicles',(req,res)=>{
    allVehicles.forEach((vehicle,ind)=>{
      let veh={
        Year:vehicle.Year,
        Make:vehicle.Make,
        Model:vehicle.Model,
        Category:vehicle.Category,
        id:ind,
        createdAt:vehicle.createdAt,
        updatedAt:vehicle.updatedAt,
        completeVehicle:""+vehicle.Make + " " +vehicle.Model +" " + vehicle.Year
      }
      Vehicles.create(veh,(err,doc)=>{
          if(err)return res.json(handleErr(err))
      })
    })
    setTimeout(()=>{
        return res.json(handleSuccess('DONE'))
    },20000)
})
module.exports = app;